#!/bin/bash

# called from multiple places
#############################
bad_exit() { printf "%b%s \\n" "\\033[31m" "$1"; exit 1; }

check_mounts_for_ecryptfs() {
    local fs_name greput
    fs_name="$1"

    greput="$(grep -r "$fs_name.*ecryptfs" /proc/mounts)"

    # if grep found a match then the fs is mounted
    if [[ -n "$greput" ]]; then
        return 0
    else
        return 1
    fi
}

# the mount functions need the SECRET fs name
mount_ecrypt_utils() {
    local fs_name
    fs_name="$1"

    printf "\\nrunning %b mount.ecryptfs_private%b%b %s %b \\n\\n" \
        "\\033[32m" "\\033[0m" "\\033[1m" "$fs_name" "\\033[0m"

    mount.ecryptfs_private "$fs_name" || bad_exit "couldn't mount $fs_name"
    return 0
}

unmount_ecrypt_utils() {
    local fs_name
    fs_name="$1"

    printf "\\nrunning %b umount.ecryptfs_private%b%b %s %b \\n\\n" \
        "\\033[32m" "\\033[0m" "\\033[1m" "$fs_name" "\\033[0m"

    umount.ecryptfs_private "$fs_name"
    return 0
}

# mount existing ecryptfs, called from update_keyring
#####################################################
insert_password() {
    local user_passwd fs_name
    fs_name="/home/chris/.ecryptfs/wrapped-passphrase-$1"

    printf "pleas enter the user password \\n"
    read -resp '--> ' user_passwd

    printf "%s" "$user_passwd" | \
        ecryptfs-insert-wrapped-passphrase-into-keyring \
            "$fs_name" - 1>/dev/null \
        || bad_exit 'insert failed'

    unset user_passwd
    return 0
}


password_msg() {
printf "%bno secret fs mounted %b \\n" "\\033[31m" "\\033[0m"
cat << __EOF__

A user password is needed to unwrapp the ecryptfs password,
so it can bo loaded in to the kernel key ring.

__EOF__
}

update_keyring() {
    local ecryptfs_name
    ecryptfs_name="$1"

    password_msg
    insert_password "$ecryptfs_name"

    mount_ecrypt_utils "$ecryptfs_name"

    [[ ! -f "$HOME/$ecryptfs_name/I_AM_A_SECRET" ]] \
        && bad_exit "no lock file pleas manually check $ecryptfs_name files"

    printf "\\n\\ndone and no errors I guess \\n"
}

# a new ecryptfs setup
##############################
print_encrypt_msg() {
printf "The ecryptfs %b%s%b is not found, \\n" \
    "\\033[33m" "$1" "\\033[0m"

cat << __EOF__

sin will now make it for you

A user password will be enterd twice in to the the kernal key ring,
once to encrypt file contets then another to encrypt file names

__EOF__
}


# wrap a new pass phrase for both file and file name encryption
# to the kernel then to the ecryptfs config files for user mounting
setup_wrapped_password() {
    local user_passwd sig_key config_file passwd_file_name

    passwd_file_name="$HOME/.ecryptfs/wrapped-passphrase-$1"

    config_file="$2"

    printf "peas provide the user password \\n"
    read -resp '--> ' user_passwd
    printf "\\n"

    printf "%s\\n%s" \
            "$(od -xAn -N30 -w30 /dev/urandom | sed -e 's|\s*||g')" \
            "$user_passwd" \
        | ecryptfs-wrap-passphrase "$passwd_file_name" \
        || bad_exit "couldn't wrap pass phrase"

    printf "%s" "$user_passwd" \
        | ecryptfs-insert-wrapped-passphrase-into-keyring \
          "$passwd_file_name" - \
        || bad_exit "couldn't enter password in to key ring"

    # then again for file name encryption and the sig will be extracted
    sig_key="$(
            printf "%s" "$user_passwd" \
            | ecryptfs-insert-wrapped-passphrase-into-keyring \
              "$passwd_file_name" - \
            | sed -r -e 's|.*\[([[:digit:][:alpha:]]+)\].*|\1|'
        )"

    # enter the sig twice in to the config_file
    printf "%s\\n%s\\n" "$sig_key" "$sig_key" > "$config_file"

    unset user_passwd sig_key
}

# the main new ecryptfs func
make_new_ecryptfs_file() {
    local ecfs_name up_dir lo_dir config_file wiki_dir

    # get the args
    ecfs_name="$1"
    lo_dir="$2"
    up_dir="$3"
    wiki_dir="$4"

    print_encrypt_msg "$ecfs_name"

    # the config file without ext
    config_file="${HOME}/.ecryptfs/${ecfs_name}"

    # make the env files
    mkdir "$lo_dir" "$up_dir" "$HOME/.ecryptfs"

    # tell ecryptfs where to look
    echo  "$lo_dir $up_dir ecryptfs" > "${config_file}.conf"

    # make a wrapped passwd then add the sigs the ecryptfs sig file
    setup_wrapped_password "$ecfs_name" "${config_file}.sig"

    mount.ecryptfs_private "$ecfs_name"

    # make default dirs and files
    mkdir "${up_dir}/${wiki_dir}" "${up_dir}/notes"
    mkdir "${up_dir}/${wiki_dir}/diary"
    touch "${up_dir}/I_AM_A_SECRET"
    printf "= In =\\n" > "${up_dir}/${wiki_dir}/in.wiki"
}
