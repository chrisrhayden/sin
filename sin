#!/bin/bash
# a wrapper around ecryptfs and a few short cuts for vimwiki

# shellcheck disable=1090
source "$(dirname "$(realpath "$0")")"/ecrypt_utils

print_help() {
cat << __EOF__
S[ecure] I[n] [&] N[otes]

Usage:
    sin [-E editor_options] [-hndum] [-w NAME]

Options:
    none                  open the in file
    -i --index            open wiki index
    -t --tasks            open the task file
    -d --diary            open todays wiki diary file
    -n --notes            open the notes dir
    -w --wiki-file NAME   open a file by NAME in the main wiki dir
    -E --editor-opts      append options to the editor call,
                          NOTE: must be set first to take affect

    -u --unmount          unmount the SECRET file
    -m --mount            mount the SECRET file
    -h --help             print this help then quit
    -H --help-noq         print this help but dont quit

__EOF__
}

# user settings
ECRYPTFS_NAME='secret'
WIKI_DIR_NAME='main_wiki'
EDITOR_OPT=('-u' "$HOME/.config/nvim/writing_init.vim")

# defaults
UPPER_DIR="$HOME/$ECRYPTFS_NAME"
LOWER_DIR="$HOME/.$ECRYPTFS_NAME"
UNMOUNT_FS=0
MOUNT_FS=0

open_notes() {
    "$EDITOR" "${EDITOR_OPT[@]}" "$UPPER_DIR/notes" \
        || bad_exit 'editor cant open dirs'
}

open_diary_entry() {
    local diary_file
    diary_file="${UPPER_DIR}/${WIKI_DIR_NAME}/diary/$(date +%F).wiki"

    if [[ ! -f "$diary_file" ]]; then
        printf "Today is %s\\n" "$(date '+%a %F')" > "$diary_file"
    fi

    "$EDITOR" "${EDITOR_OPT[@]}" "$diary_file"
}

# open a file in the wiki dir, $1 will be file name
open_wiki_file() {
    local local_in_file the_wiki_file
    the_wiki_file="$1"

    local_in_file="$UPPER_DIR/${WIKI_DIR_NAME}/${the_wiki_file}.wiki"

    "$EDITOR" "${EDITOR_OPT[@]}" "$local_in_file"
}

if [[ ! -d "$LOWER_DIR" ]]; then
    make_new_ecryptfs_file \
        "$ECRYPTFS_NAME" "$LOWER_DIR" "$UPPER_DIR" "$WIKI_DIR_NAME"
elif ! check_mounts_for_ecryptfs "$ECRYPTFS_NAME"; then
    update_keyring "$ECRYPTFS_NAME"
fi

# get cli args and set options accordingly
while [[ -n "$1" ]]; do
    case "$1" in
        -E|--editor-opt)
            shift
            EDITOR_OPT+=("$1")
            ;;
        -n|--note)
            open_notes
            ;;
        -d|--diary)
            open_diary_entry
            ;;
        -i|--index)
            open_wiki_file 'index'
            ;;
        -t|--tasks)
            open_wiki_file 'tasks'
            ;;
        -w|--wiki-file)
            shift
            open_wiki_file "$1"
            ;;
        -u|--unmount)
            UNMOUNT_FS=1
            ;;
        -m|--mount)
            MOUNT_FS=1
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        -H|--help-noq)
            print_help
            ;;
        *)  # anything not above
            printf "%bError:%b\\n   bad cli args -> %b%s%b \\n" \
                '\033[31m' '\033[0m' '\033[33m' "$@" '\033[0m'
            print_help
            exit 1
            ;;
    esac
    # shift will remove $1 and move $2 down so the loop will finish
    shift
done

if ((MOUNT_FS)); then
    mount_ecrypt_utils "$ECRYPTFS_NAME"
elif ((UNMOUNT_FS)); then
    unmount_ecrypt_utils "$ECRYPTFS_NAME"
else
    open_wiki_file 'in'
fi
